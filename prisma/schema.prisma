generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id        Int      @id @default(autoincrement())
  storeName String   @db.VarChar(225)
  ownerId   Int      @unique
  branchs   Branch[]
  owner     User     @relation("StoreOwner", fields: [ownerId], references: [id])
}

model Branch {
  id         Int       @id @default(autoincrement())
  branchName String    @db.VarChar(225)
  cityId     String?
  districtId String?
  provinceId String?
  street     String?   @db.VarChar(225)
  villageId  String?
  storeId    Int
  adminId    Int?      @unique
  admin      User?     @relation("BranchAdmin", fields: [adminId], references: [id])
  store      Store     @relation(fields: [storeId], references: [id])
  order      Order[]
  product    Product[]
  sellers    User[]    @relation("BranchSeller")
  city       City?     @relation(fields: [cityId], references: [id])
  district   District? @relation(fields: [districtId], references: [id])
  province   Province? @relation(fields: [provinceId], references: [id])
  village    Village?  @relation(fields: [villageId], references: [id])
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String    @db.VarChar(225)
  userName     String?   @db.VarChar(225)
  phone        String?
  refreshToken String?
  avatar       String?
  cityId       String?
  districtId   String?
  provinceId   String?
  street       String?   @db.VarChar(225)
  villageId    String?
  role         Role      @default(CUSTOMER)
  branchId     Int?
  branchAdmin  Branch?   @relation("BranchAdmin")
  cart         Cart?
  orders       Order[]
  products     Product[]
  reviews      Review[]
  store        Store?    @relation("StoreOwner")
  branchSeller Branch?   @relation("BranchSeller", fields: [branchId], references: [id])
  city         City?     @relation(fields: [cityId], references: [id])
  district     District? @relation(fields: [districtId], references: [id])
  province     Province? @relation(fields: [provinceId], references: [id])
  village      Village?  @relation(fields: [villageId], references: [id])
}

model Province {
  id           String @id
  provinceName String @db.VarChar(50)
  cities       City[]
  users        User[]
  branch       Branch[]
}

model City {
  id         String     @id
  cityName   String
  provinceId String
  province   Province   @relation(fields: [provinceId], references: [id])
  districts  District[]
  users      User[]
  branch     Branch[]
}

model District {
  id           String    @id
  districtName String
  cityId       String
  city         City      @relation(fields: [cityId], references: [id])
  users        User[]
  branch       Branch[]
  villages     Village[]
}

model Village {
  id          String   @id
  villageName String
  districtId  String
  users       User[]
  branch      Branch[]
  district    District @relation(fields: [districtId], references: [id])
}

model Product {
  id          Int               @id @default(autoincrement())
  productName String            @db.VarChar(225)
  description String            @db.VarChar(1000)
  images      String[]
  stock       Int
  price       Decimal           @db.Decimal(19, 2)
  userId      Int
  branchId    Int
  cartItems   CartItem[]
  orderItems  OrderItem[]
  branch      Branch            @relation(fields: [branchId], references: [id])
  user        User              @relation(fields: [userId], references: [id])
  category    ProductCategory[]
  review      Review[]
}

model Category {
  id           Int               @id @default(autoincrement())
  categoryName String            @db.VarChar(225)
  product      ProductCategory[]
}

model ProductCategory {
  productId  Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@id([productId, categoryId])
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Decimal  @db.Decimal(1, 1)
  comment   String   @db.VarChar(1000)
  createdAt DateTime @default(now())
  userId    Int
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model OrderItem {
  id             Int      @id @default(autoincrement())
  quantity       Int
  price          Decimal  @db.Decimal(19, 2)
  note           String?  @db.VarChar(100)
  createdAt      DateTime @default(now())
  productId      Int
  invoice_number String
  order          Order    @relation(fields: [invoice_number], references: [invoice_number])
  product        Product  @relation(fields: [productId], references: [id])
}

model Order {
  invoice_number String        @id
  totalPrice     Decimal       @db.Decimal(19, 2)
  shippingCost   Decimal       @db.Decimal(19, 2)
  totalAmount    Decimal       @db.Decimal(19, 2)
  paymentStatus  PaymentStatus @default(PENDING)
  paymentProof   String?
  paymentDate    DateTime?
  status         OrderStatus   @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  customerId     Int
  branchId       Int
  branch         Branch        @relation(fields: [branchId], references: [id])
  user           User          @relation(fields: [customerId], references: [id])
  orderItems     OrderItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Decimal  @db.Decimal(19, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cartId    Int
  productId Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int        @unique
  user      User       @relation(fields: [userId], references: [id])
  CartItems CartItem[]
}

enum Role {
  SELLER
  CUSTOMER
  OWNER
  ADMIN
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  COMPLETED
  FAILED
}
